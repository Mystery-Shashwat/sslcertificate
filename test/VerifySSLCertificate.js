const { expect } = require("chai");
const { ethers } = require("hardhat");

// certificate (IDE formatting off because line too long)
const cert = '0x3082051a30820402a0030201020212040cba6d3770f4c60acaac1b29453c701320300d06092a864886f70d01010b05003032310b300906035504061302555331163014060355040a130d4c6574277320456e6372797074310b3009060355040313025233301e170d3232303431383231303933385a170d3232303731373231303933375a3015311330110603550403130a686f6c6f6e796d2e696430820122300d06092a864886f70d01010105000382010f003082010a0282010100b42cde805cd01cfd52689702d8cc094d7d8f0478208133e2080610fef2f7bf2e20ec5516ee313809b30d0b8afc0d47e23179f10480a9de79f68dd9279098fff3c16dd1ea69cfa0b6e07d1ccc81e0bd27c4c641dd35db3ef11309e5126b303519fafff273d867507220e896fd98de0f0222b6a77f8f355032147be640d1739f02d345e6804011436520bbe6aac9b86f1d5e892a84d19c9277d67f0a976b1e0e7d981196bf4df91047ca9d873efa551f62e90cf967a3472f7f72033730f491c0e038507c8f8b4fff073ff79ea2f087c601e70cee5405423209e1523c75134ef60d3cb845d66e69c5efda78d56c0f2b1f1f0577527a5db0f2de82d3e8807c575a870203010001a382024530820241300e0603551d0f0101ff0404030205a0301d0603551d250416301406082b0601050507030106082b06010505070302300c0603551d130101ff04023000301d0603551d0e04160414cf764cf3314b3cbd12592c02df6a05fc88f343d6301f0603551d23041830168014142eb317b75856cbae500940e61faf9d8b14c2c6305506082b0601050507010104493047302106082b060105050730018615687474703a2f2f72332e6f2e6c656e63722e6f7267302206082b060105050730028616687474703a2f2f72332e692e6c656e63722e6f72672f30150603551d11040e300c820a686f6c6f6e796d2e6964304c0603551d20044530433008060667810c0102013037060b2b0601040182df130101013028302606082b06010505070201161a687474703a2f2f6370732e6c657473656e63727970742e6f726730820104060a2b06010401d6790204020481f50481f200f00077002979bef09e393921f056739f63a577e5be577d9c600af8f94d5d265c255dc784000001803eb963010000040300483046022100b074f7194abe1f315549c79dd3ee77bea74b57fa7efb98202c74544cf0943f17022100f66ba6a55a16ad6e65fd5c4e62a33992ff4b83c88a3d08537f75ec1cedd96e96007500dfa55eab68824f1f6cadeeb85f4e3e5aeacda212a46a5e8e3b12c020445c2a73000001803eb9650600000403004630440220170a883375dbd2f72444d71175fd07d4171a214d0d01e8217f0edbfb4fc8e2ac02204abde5c39362392817ba6e08343b770ba30369a794dce83ebce43ac0c3ea5516300d06092a864886f70d01010b0500038201010082e86a6a5aacd0f170906f5dc2e04e271c5af8f6742fc5cb627b81ba2f7fca7e5d6d3ad5ab02f4314184e56ed1ffcf19ee0a61da98dbe22f9c731b905711400ae67ba56cc37ab4c518041e4902c15f8f021168709ec03479e82993a546513668e2b6a163a9c0caf4fc9f9978453eaf7361b497a46d78b651dee7e69fbc56ecc77cc2c84e9e4f6d22b976d24d29bd8640c230e9a77d572f07e2589bbbfb72b2ebf82f55787397bb49c60c5b5d9eb8fabeec9b90a5bfaaed3ed93b610dc9a6cd9266f07c21e784b8fc59d4f82f037df1780e247e1f07aa1d1d21d2a85a1b0e6b198c33edfaebed70f02c93a7e7d27e0cd4be0f06082839d4dbaa409fa71e027ae7'
const certPubkeyN = '0x00b42cde805cd01cfd52689702d8cc094d7d8f0478208133e2080610fef2f7bf2e20ec5516ee313809b30d0b8afc0d47e23179f10480a9de79f68dd9279098fff3c16dd1ea69cfa0b6e07d1ccc81e0bd27c4c641dd35db3ef11309e5126b303519fafff273d867507220e896fd98de0f0222b6a77f8f355032147be640d1739f02d345e6804011436520bbe6aac9b86f1d5e892a84d19c9277d67f0a976b1e0e7d981196bf4df91047ca9d873efa551f62e90cf967a3472f7f72033730f491c0e038507c8f8b4fff073ff79ea2f087c601e70cee5405423209e1523c75134ef60d3cb845d66e69c5efda78d56c0f2b1f1f0577527a5db0f2de82d3e8807c575a87'
// Let's Encrypt public key modulus
const letsEncryptN = '0x00ade82473f41437f39b9e2b57281c87bedcb7df38908c6e3ce657a078f775c2a2fef56a6ef6004f28dbde68866c4493b6b163fd14126bbf1fd2ea319b217ed1333cba48f5dd79dfb3b8ff12f1219a4bc18a8671694a66666c8f7e3c70bfad292206f3e4c0e680aee24b8fb7997e94039fd347977c99482353e838ae4f0a6f832ed149578c8074b6da2fd0388d7b0370211b75f2303cfa8faeddda63abeb164fc28e114b7ecf0be8ffb5772ef4b27b4ae04c12250c708d0329a0e15324ec13d9ee19bf10b34a8c3f89a36151deac870794f46371ec2ee26f5b9881e1895c34796c76ef3b906279e6dba49a2f26c5d010e10eded9108e16fbb7f7a8f7c7e50207988f360895e7e237960d36759efb0e72b11d9bbc03f94905d881dd05b42ad641e9ac0176950a0fd8dfd5bd121f352f28176cd298c1a80964776e4737baceac595e689d7f72d689c50641293e593edd26f524c911a75aa34c401f46a199b5a73a516e863b9e7d72a712057859ed3e5178150b038f8dd02f05b23e7b4a1c4b730512fcc6eae050137c439374b3ca74e78e1f0108d030d45b7136b407bac130305c48b7823b98a67d608aa2a32982ccbabd83041ba2830341a1d605f11bc2b6f0a87c863b46a8482a88dc769a76bf1f6aa53d198feb38f364dec82b0d0a28fff7dbe21542d422d0275de179fe18e77088ad4ee6d98b3ac6dd27516effbc64f533434f'
const _signedAddress = '0x35c2aec29f4ac2a3c3a52d15c3b62e68c28501621ac2bbc2b0c287c2bd01c3b2c29b54c296c2aec29938c2a801c28a2ac38f16c28fc38cc2974363c3966341c295c3b0c38ac38fc388c29d5677c3aac380c39ec2bfc2afc28cc3a074c3920541c2b9c38659c3b2c397c3bac3aec3aac3b4c2ba736b3fc392c392317914c2adc3afc2a0c3a8c38f0d77c28b53c38e5ac3884b59c28a116ec399c38d72c394c38dc3bb64224a1942c2967a06c3bac39a08c2be1b55c2995f40c3a1c2a64f28c39ec3b2c39ac3be1cc2aec382c28240c3b8c2946fc2ba62c3bcc2aa0b6e60c28bc3bf2fc29838c2903172c3935f242a70c2aa1941c295496b4541c387c3bdc2ad480633c3a5c2b31f1dc38b50c38ec2b06bc2b16456c3a02dc2a4c2ae37c3907e092a4dc3b6c3b3c3b43bc38c202e55c2a0634cc39fc286c2b9c3b30fc288c38fc2bbc3a676c39fc3b214c2b8c38bc38ac28832c2907bc3a65258c2bd31c3af5fc3aa2041c38dc396c3a4c2a6c285c3843ac3afc2b60fc2ab624d233ac292c28114c3acc285741973301a'
const signedAddress = '0x35ae9f4aa3e52d15f62e688501621abbb087bd01f29b5496ae9938a8018a2acf168fcc974363d6634195f0cacfc89d5677eac0debfaf8ce074d20541b9c659f2d7faeeeaf4ba736b3fd2d2317914adefa0e8cf0d778b53ce5ac84b598a116ed9cd72d4cdfb64224a1942967a06fada08be1b55995f40e1a64f28def2dafe1caec28240f8946fba62fcaa0b6e608bff2f9838903172d35f242a70aa194195496b4541c7fdad480633e5b31f1dcb50ceb06bb16456e02da4ae37d07e092a4df6f3f43bcc202e55a0634cdf86b9f30f88cfbbe676dff214b8cbca8832907be65258bd31ef5fea2041cdd6e4a685c43aefb60fab624d233a928114ec85741973301a'
describe('VerifySSLCertificate.sol', function () {
    before(async function(){
      this.wtfu = await (await ethers.getContractFactory('WTFUtils')).deploy()
      this.a1u = await (await ethers.getContractFactory('ASN1Utils', {
          libraries: {
              'WTFUtils' : this.wtfu.address
            }
        })).deploy()

      this.vsc = await (await ethers.getContractFactory('VerifySSLCertificate', {
          libraries: {
            'WTFUtils' : this.wtfu.address,
            'ASN1Utils' : this.a1u.address
         }
        })).deploy(65537, letsEncryptN)
    });
  
    it('Extract domain name and public key from to-be-signed certificate', async function () {
        const ownerInfo = await this.a1u.getCertOwner(cert)
        expect(await ownerInfo.domainName).to.equal('0x' + Buffer.from('holonym.id').toString('hex'))
        expect(await ownerInfo.pubkeyModulus).to.equal(certPubkeyN)
    });

    it('Verify signature of address', async function () { //Should be elsewhere or likely part of integration test
      expect(
        await this.wtfu.verifyRSASignature(
          65537, 
          certPubkeyN, 
          signedAddress, Buffer.from('0xC8834C1FcF0Df6623Fc8C8eD25064A4148D99388')
          )
        ).to.equal(true)
  });
  });