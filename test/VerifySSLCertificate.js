const { expect } = require('chai');
const { ethers } = require('hardhat');

// certificate (IDE formatting off because line too long)
const cert = '0x3082051a30820402a0030201020212040cba6d3770f4c60acaac1b29453c701320300d06092a864886f70d01010b05003032310b300906035504061302555331163014060355040a130d4c6574277320456e6372797074310b3009060355040313025233301e170d3232303431383231303933385a170d3232303731373231303933375a3015311330110603550403130a686f6c6f6e796d2e696430820122300d06092a864886f70d01010105000382010f003082010a0282010100b42cde805cd01cfd52689702d8cc094d7d8f0478208133e2080610fef2f7bf2e20ec5516ee313809b30d0b8afc0d47e23179f10480a9de79f68dd9279098fff3c16dd1ea69cfa0b6e07d1ccc81e0bd27c4c641dd35db3ef11309e5126b303519fafff273d867507220e896fd98de0f0222b6a77f8f355032147be640d1739f02d345e6804011436520bbe6aac9b86f1d5e892a84d19c9277d67f0a976b1e0e7d981196bf4df91047ca9d873efa551f62e90cf967a3472f7f72033730f491c0e038507c8f8b4fff073ff79ea2f087c601e70cee5405423209e1523c75134ef60d3cb845d66e69c5efda78d56c0f2b1f1f0577527a5db0f2de82d3e8807c575a870203010001a382024530820241300e0603551d0f0101ff0404030205a0301d0603551d250416301406082b0601050507030106082b06010505070302300c0603551d130101ff04023000301d0603551d0e04160414cf764cf3314b3cbd12592c02df6a05fc88f343d6301f0603551d23041830168014142eb317b75856cbae500940e61faf9d8b14c2c6305506082b0601050507010104493047302106082b060105050730018615687474703a2f2f72332e6f2e6c656e63722e6f7267302206082b060105050730028616687474703a2f2f72332e692e6c656e63722e6f72672f30150603551d11040e300c820a686f6c6f6e796d2e6964304c0603551d20044530433008060667810c0102013037060b2b0601040182df130101013028302606082b06010505070201161a687474703a2f2f6370732e6c657473656e63727970742e6f726730820104060a2b06010401d6790204020481f50481f200f00077002979bef09e393921f056739f63a577e5be577d9c600af8f94d5d265c255dc784000001803eb963010000040300483046022100b074f7194abe1f315549c79dd3ee77bea74b57fa7efb98202c74544cf0943f17022100f66ba6a55a16ad6e65fd5c4e62a33992ff4b83c88a3d08537f75ec1cedd96e96007500dfa55eab68824f1f6cadeeb85f4e3e5aeacda212a46a5e8e3b12c020445c2a73000001803eb9650600000403004630440220170a883375dbd2f72444d71175fd07d4171a214d0d01e8217f0edbfb4fc8e2ac02204abde5c39362392817ba6e08343b770ba30369a794dce83ebce43ac0c3ea5516300d06092a864886f70d01010b0500038201010082e86a6a5aacd0f170906f5dc2e04e271c5af8f6742fc5cb627b81ba2f7fca7e5d6d3ad5ab02f4314184e56ed1ffcf19ee0a61da98dbe22f9c731b905711400ae67ba56cc37ab4c518041e4902c15f8f021168709ec03479e82993a546513668e2b6a163a9c0caf4fc9f9978453eaf7361b497a46d78b651dee7e69fbc56ecc77cc2c84e9e4f6d22b976d24d29bd8640c230e9a77d572f07e2589bbbfb72b2ebf82f55787397bb49c60c5b5d9eb8fabeec9b90a5bfaaed3ed93b610dc9a6cd9266f07c21e784b8fc59d4f82f037df1780e247e1f07aa1d1d21d2a85a1b0e6b198c33edfaebed70f02c93a7e7d27e0cd4be0f06082839d4dbaa409fa71e027ae7'

const tbsCert = '0x30820402a0030201020212040cba6d3770f4c60acaac1b29453c701320300d06092a864886f70d01010b05003032310b300906035504061302555331163014060355040a130d4c6574277320456e6372797074310b3009060355040313025233301e170d3232303431383231303933385a170d3232303731373231303933375a3015311330110603550403130a686f6c6f6e796d2e696430820122300d06092a864886f70d01010105000382010f003082010a0282010100b42cde805cd01cfd52689702d8cc094d7d8f0478208133e2080610fef2f7bf2e20ec5516ee313809b30d0b8afc0d47e23179f10480a9de79f68dd9279098fff3c16dd1ea69cfa0b6e07d1ccc81e0bd27c4c641dd35db3ef11309e5126b303519fafff273d867507220e896fd98de0f0222b6a77f8f355032147be640d1739f02d345e6804011436520bbe6aac9b86f1d5e892a84d19c9277d67f0a976b1e0e7d981196bf4df91047ca9d873efa551f62e90cf967a3472f7f72033730f491c0e038507c8f8b4fff073ff79ea2f087c601e70cee5405423209e1523c75134ef60d3cb845d66e69c5efda78d56c0f2b1f1f0577527a5db0f2de82d3e8807c575a870203010001a382024530820241300e0603551d0f0101ff0404030205a0301d0603551d250416301406082b0601050507030106082b06010505070302300c0603551d130101ff04023000301d0603551d0e04160414cf764cf3314b3cbd12592c02df6a05fc88f343d6301f0603551d23041830168014142eb317b75856cbae500940e61faf9d8b14c2c6305506082b0601050507010104493047302106082b060105050730018615687474703a2f2f72332e6f2e6c656e63722e6f7267302206082b060105050730028616687474703a2f2f72332e692e6c656e63722e6f72672f30150603551d11040e300c820a686f6c6f6e796d2e6964304c0603551d20044530433008060667810c0102013037060b2b0601040182df130101013028302606082b06010505070201161a687474703a2f2f6370732e6c657473656e63727970742e6f726730820104060a2b06010401d6790204020481f50481f200f00077002979bef09e393921f056739f63a577e5be577d9c600af8f94d5d265c255dc784000001803eb963010000040300483046022100b074f7194abe1f315549c79dd3ee77bea74b57fa7efb98202c74544cf0943f17022100f66ba6a55a16ad6e65fd5c4e62a33992ff4b83c88a3d08537f75ec1cedd96e96007500dfa55eab68824f1f6cadeeb85f4e3e5aeacda212a46a5e8e3b12c020445c2a73000001803eb9650600000403004630440220170a883375dbd2f72444d71175fd07d4171a214d0d01e8217f0edbfb4fc8e2ac02204abde5c39362392817ba6e08343b770ba30369a794dce83ebce43ac0c3ea5516'
const tbsCertSignature = '0x0082e86a6a5aacd0f170906f5dc2e04e271c5af8f6742fc5cb627b81ba2f7fca7e5d6d3ad5ab02f4314184e56ed1ffcf19ee0a61da98dbe22f9c731b905711400ae67ba56cc37ab4c518041e4902c15f8f021168709ec03479e82993a546513668e2b6a163a9c0caf4fc9f9978453eaf7361b497a46d78b651dee7e69fbc56ecc77cc2c84e9e4f6d22b976d24d29bd8640c230e9a77d572f07e2589bbbfb72b2ebf82f55787397bb49c60c5b5d9eb8fabeec9b90a5bfaaed3ed93b610dc9a6cd9266f07c21e784b8fc59d4f82f037df1780e247e1f07aa1d1d21d2a85a1b0e6b198c33edfaebed70f02c93a7e7d27e0cd4be0f06082839d4dbaa409fa71e027ae7'

const certPubkeyN = '0x00b42cde805cd01cfd52689702d8cc094d7d8f0478208133e2080610fef2f7bf2e20ec5516ee313809b30d0b8afc0d47e23179f10480a9de79f68dd9279098fff3c16dd1ea69cfa0b6e07d1ccc81e0bd27c4c641dd35db3ef11309e5126b303519fafff273d867507220e896fd98de0f0222b6a77f8f355032147be640d1739f02d345e6804011436520bbe6aac9b86f1d5e892a84d19c9277d67f0a976b1e0e7d981196bf4df91047ca9d873efa551f62e90cf967a3472f7f72033730f491c0e038507c8f8b4fff073ff79ea2f087c601e70cee5405423209e1523c75134ef60d3cb845d66e69c5efda78d56c0f2b1f1f0577527a5db0f2de82d3e8807c575a87'
// Let's Encrypt public key modulus
const letsEncryptN = '0x00bb021528ccf6a094d30f12ec8d5592c3f882f199a67a4288a75d26aab52bb9c54cb1af8e6bf975c8a3d70f4794145535578c9ea8a23919f5823c42a94e6ef53bc32edb8dc0b05cf35938e7edcf69f05a0b1bbec094242587fa3771b313e71cace19befdbe43b45524596a9c153ce34c852eeb5aeed8fde6070e2a554abb66d0e97a540346b2bd3bc66eb66347cfa6b8b8f572999f830175dba726ffb81c5add286583d17c7e709bbf12bf786dcc1da715dd446e3ccad25c188bc60677566b3f118f7a25ce653ff3a88b647a5ff1318ea9809773f9d53f9cf01e5f5a6701714af63a4ff99b3939ddc53a706fe48851da169ae2575bb13cc5203f5ed51a18bdb15'

const addressBytes = Buffer.from('C8834C1FcF0Df6623Fc8C8eD25064A4148D99388', 'hex')
const signedAddress = '0x7fc3398a354e43edafc29e5c171bfc5c9774f17000841b22a3d129c2625bfd4aefe935a32506bc53663c3802a82e88eb5f9580484ae41e3489126c7333cd32dc82c1d8becd4003c70694c6dcc50435f5269d617d8980d1b0e7a8d5562e82d55a4ce1b1de7cbdd6f2ef16096680d861a5686db44fb39e6b13734a18d62ef41fdb9fafc117b672f7803eee95bb31efa605da64fad2593333de373d296ea46177c6bd99d7ebb69f9d488485d96adcd10b12a299683dc17a110d37eb53ddce4cfd372c57656d1342799322cacf32164ff42efbe8693192c15e397f709b355c82f56953013fc7b0cddb39d93b9ede32a1895d668d57be3fd989364b6c2f45702c7e0e'

describe('VerifySSLCertificate.sol', function () {
    before(async function(){
      this.wtfu = await (await ethers.getContractFactory('WTFUtils')).deploy()
      this.a1u = await (await ethers.getContractFactory('ASN1Utils', {
          libraries: {
              'WTFUtils' : this.wtfu.address
            }
        })).deploy()

      this.vsc = await (await ethers.getContractFactory('VerifySSLCertificate', {
          libraries: {
            'WTFUtils' : this.wtfu.address,
            'ASN1Utils' : this.a1u.address
         }
        })).deploy(65537, letsEncryptN)
    });
  
    it('Extract domain name and public key from to-be-signed certificate', async function () {
        const ownerInfo = await this.a1u.getCertOwner(tbsCert)
        expect(await ownerInfo.domainName).to.equal('0x' + Buffer.from('holonym.id').toString('hex'))
        expect(await ownerInfo.pubkeyModulus).to.equal(certPubkeyN)
    });

    it('Verify signature of address', async function () {
      expect(
        await this.wtfu.verifyRSASignature(
            65537, 
            certPubkeyN, 
            signedAddress, 
            addressBytes
          )
        ).to.equal(true)

  });

  it('Verify SSL certificate', async function () {
      let tx = await this.vsc.verifyMe(
        tbsCert,
        tbsCertSignature,
        addressBytes,
        signedAddress,
      )
      await tx.wait()
      expect(
          await this.vsc.addrToDomain('0x' + addressBytes.toString('hex'))
        ).to.equal(
          '0x' + Buffer.from('holonym.id').toString('hex')
        )
      expect(
          (await this.vsc.domainToAddr(Buffer.from('holonym.id'))).toLowerCase()
        ).to.equal(
          ('0x' + addressBytes.toString('hex')).toLowerCase()
        )
  });

  // TODO: better edge cases for each parameter
  describe('Incorrect parameters causes revert (TODO: find edge cases for each parameter)', async function() {
    it('tbsCert', async function () {
      let tx = this.vsc.verifyMe(
        tbsCert.replace('a','b'),
        tbsCertSignature,
        addressBytes,
        signedAddress,
      )
      await expect(tx).to.be.reverted
    });

    it('tbsCertSignature', async function () {
      let tx = this.vsc.verifyMe(
        tbsCert,
        tbsCertSignature.replace('a','b'),
        addressBytes,
        signedAddress,
      )
      await expect(tx).to.be.reverted
    });

    it('addressBytes', async function () {
      let tx = this.vsc.verifyMe(
        tbsCert,
        tbsCertSignature,
        addressBytes.slice(3, addressBytes.length-4), //just take an arbitrary slice of the address (i imagine there are some better some edge cases but can't think of any rn)
        signedAddress,
      )
      await expect(tx).to.be.reverted
    });

    it('signedAddress', async function () {
      let tx = this.vsc.verifyMe(
        tbsCert,
        tbsCertSignature,
        addressBytes,
        signedAddress.replace('a','b'),
      )
      await expect(tx).to.be.reverted
    });

  });
});